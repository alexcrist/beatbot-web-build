{"version":3,"sources":["src/features/Editor/EditorLoaded.js","src/features/Editor/AudioVisualCursor.js","src/features/Editor/AudioVisual.js","src/features/Editor/ConfidencePicker.js","src/features/Editor/DrumPicker.js","src/util/conversion.js","src/features/Editor/DrumPickerModalFolder.js","src/features/Editor/DrumPickerModal.js","src/audio/midiBuilder.js","src/util/exporter.js","src/util/fileWriter.web.js","src/features/Editor/ExportModal.js","src/features/Editor/EditorLoading.js","src/features/Editor/Editor.js"],"names":["inputSound","outputSound","Container","styled","View","STANDARD_FONT_SIZE","SMALL_MARGIN","COLORS","DARK","props","isVisible","AnimatedContainer","Animated","createAnimatedComponent","AudioVisualCursor","isInputPlaying","isOutputPlaying","inputDuration","useState","animation","setAnimation","animatedLeft","useRef","Value","current","animatedLeftPercent","interpolate","inputRange","outputRange","useEffect","duration","loop","sequence","timing","toValue","useNativeDriver","ANIMATION_USE_NATIVE_DRIVER","easing","Easing","linear","start","startAnimation","stop","style","left","STANDARD_MARGIN","Timestamps","Timestamp","Text","FONT","Lines","LinesInner","width","Line","AUDIO_VISUAL_LINE_WIDTH","color","height","getLineHeight","volume","numLines","index","startIndex","Math","floor","length","endIndex","sum","i","updateLineColors","colors","beatStart","beatEnd","classification","colorIndex","HIGHLIGHTS","lineStartIndex","ceil","lineEndIndex","max","AudioVisual","beatStarts","beatEnds","classifications","timestamps","seconds","round","push","formatSeconds","dimensions","setDimensions","lines","useMemo","AUDIO_VISUAL_LINE_MARGIN","innerWidth","lineHeights","maxLineHeight","Infinity","minLineHeight","lineHeight","min","LIGHT","pixelHeight","onLayout","event","nativeEvent","layout","SlidingContianer","numbersLength","AnimatedSlidingContainer","Slide","SlideTitle","TITLE_FONT","TITLE_FONT_SIZE","SlideText","LeftArrowButton","TouchableOpacity","RightArrowButton","animatedMarginPercent","ConfidencePicker","label","numbers","confidences","selectNumber","selectedNumber","selectedIndex","animatedMargin","marginLeft","map","number","onPress","FontAwesome5","name","size","CONFIDENCE_PICKER_ARROW_SIZE","solid","DrumContainer","DrumInner","DRUM_PICKER_BUTTON_HEIGHT","DrumText","SMALL_FONT_SIZE","FONT_BOLD","BACKGROUND","DrumPicker","drumMap","showModal","setSelectedClassification","uniqueClassifications","includes","drums","drumIndex","getDrumById","drum","toLowerCase","framesToSamples","frames","windowSize","osamp","TitleContainer","Title","LARGE_FONT_SIZE","DrumSound","isSelected","DrumSoundText","DrumPickerModalFolder","drumSoundFolder","selectedDrumId","setSelectedDrumId","initialIsOpened","children","id","isOpened","setIsOpened","drumSound","sound","play","StyledModal","Modal","Header","SoundButton","BUTTON_BORDER_WIDTH","SoundButtonText","Folders","ScrollView","Buttons","DoneButton","PrimaryButton","DrumPickerModal","setIsVisible","inputAudio","newDrumId","newDrumMap","setSelectedDrumMap","beatIndex","soundStart","BEATBOT_WINDOW_SIZE","BEATBOT_OSAMP","soundEnd","audio","data","slice","makeSound","Int16Array","rate","channels","close","contentContainerStyle","flex","drumSounds","text","framesToTicks","sampleRate","bpm","samples","ms","samplesToMs","msToTicks","tempo","exportRecording","recording","exportType","bytes","isMidi","EXPORT_FILE_TYPES","MIDI","isWav","WAV","Error","beatbotData","outputAudio","dataArray","buildWavBytes","midiTrack","MidiWriter","Track","setTempo","MIDI_BPM","startTick","tickDuration","midiPitch","MIDI_DRUM_START","midiNote","NoteEvent","pitch","addEvent","Writer","buildFile","buffer","buildMidiBytes","extension","fileName","blob","Blob","type","url","window","URL","createObjectURL","element","document","createElement","setAttribute","display","body","appendChild","click","removeChild","revokeObjectURL","writeFile","ExportModal","useSelector","selectFocusedRecording","ModalOptions","options","TopSection","BottomSection","ConfidencePickerContainer","ButtonsTop","PlayInputButton","SecondaryButton","PlayButton","EditorLoaded","state","navigation","useNavigation","setOptions","title","headerLeft","EditorBackButton","load","isDrumPickerModalVisible","setIsDrumPickerModalVisible","selectedClassification","setIsInputPlaying","setIsOutputPlaying","playInputTimeout","setPlayInputTimeout","playOutputTimeout","setPlayOutputTimeout","stopInput","clearTimeout","stopOutput","isExportModalVisible","setIsExportModalVisible","likelyNumPeaks","EDITOR_MAX_NUM_PEAKS","numPeaksLikelihoods","setSelectedNumPeaks","chosenNumPeaks","likelyNumClusters","EDITOR_MAX_NUM_CLUSTERS","numClustersLikelihoods","setSelectedNumClusters","chosenNumClusters","onplay","timeout","setTimeout","icon","EditorLoading","WaveVisual","lineColors","PROCESSING_WAVE_VISUAL_COLORS","Editor","content","recordings","isProcessing"],"mappings":"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","file":"static/js/4.0ea6a588.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components/native';\nimport { makeSound } from '../../audio/player/player.web';\nimport { PrimaryButton, SecondaryButton } from '../../components/Button';\nimport { EDITOR_MAX_NUM_CLUSTERS, EDITOR_MAX_NUM_PEAKS, SMALL_MARGIN, STANDARD_MARGIN } from '../../constants';\nimport { selectFocusedRecording } from '../../redux/selectors';\nimport { setSelectedNumClusters, setSelectedNumPeaks } from '../../recordings/recordingEditor';\nimport AudioVisual from './AudioVisual';\nimport ConfidencePicker from './ConfidencePicker';\nimport DrumPicker from './DrumPicker';\nimport DrumPickerModal from './DrumPickerModal';\nimport EditorBackButton from './EditorBackButton';\nimport ExportModal from './ExportModal';\nimport { useNavigation } from '@react-navigation/native';\n\nconst Container = styled.View`\n  flex: 1;\n  align-items: center;\n`;\n\nconst TopSection = styled.View`\n  align-items: center;\n  flex: 1;\n  width: 100%;\n`;\n\nconst BottomSection = styled.View`\n  align-items: center;\n  width: 100%;\n`;\n\nconst ConfidencePickerContainer = styled.View`\n  margin-top: ${STANDARD_MARGIN}px;\n  width: 100%;\n  max-width: 1000px;\n`;\n\nconst Buttons = styled.View`\n  align-items: center;\n  width: 100%;\n  max-width: 500px;\n  padding: ${STANDARD_MARGIN}px;\n`;\n\nconst ButtonsTop = styled.View`\n  flex-direction: row;\n  justify-content: center;\n  margin-bottom: ${SMALL_MARGIN}px;\n  margin-horizontal: ${STANDARD_MARGIN}px;\n  width: 100%;\n`;\n\nconst PlayInputButton = styled(SecondaryButton)`\n  margin-right: ${SMALL_MARGIN / 2}px;\n  flex: 1;\n`;\n\nconst PlayButton = styled(PrimaryButton)`\n  margin-left: ${SMALL_MARGIN / 2}px;\n  flex: 1;\n`;\n\nlet inputSound;\nlet outputSound;\n\nconst EditorLoaded = () => {\n  \n  const recording = useSelector(state => selectFocusedRecording(state));\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    navigation.setOptions({ \n      title: recording.name,\n      headerLeft: EditorBackButton,\n    });\n  }, [recording, navigation]);\n\n  const inputAudio = useSelector(state => selectFocusedRecording(state).inputAudio);\n  const outputAudio = useSelector(state => selectFocusedRecording(state).beatbotData.outputAudio);\n\n  useEffect(() => {\n    if (inputSound) {\n      inputSound.load();\n    }\n    if (inputAudio) {\n      const { data, rate, channels } = inputAudio;\n      inputSound = makeSound(data, rate, channels);\n    }\n  }, [inputAudio]);\n\n  useEffect(() => {\n    if (outputSound) {\n      outputSound.load();\n    }\n    if (outputAudio) {\n      const { data, rate, channels } = outputAudio;\n      outputSound = makeSound(data, rate, channels);\n    }\n  }, [outputAudio]);\n\n  const [isDrumPickerModalVisible, setIsDrumPickerModalVisible] = useState(false);\n  const [selectedClassification, setSelectedClassification] = useState(-1);\n\n  const [isInputPlaying, setIsInputPlaying] = useState(false);\n  const [isOutputPlaying, setIsOutputPlaying] = useState(false);\n  const [playInputTimeout, setPlayInputTimeout] = useState(null);\n  const [playOutputTimeout, setPlayOutputTimeout] = useState(null);\n\n  const playInput = () => {\n    inputSound.onplay = () => {\n      const timeout = setTimeout(() => setIsInputPlaying(false), recording.inputAudio.duration * 1000);\n      setPlayInputTimeout(timeout);\n      setIsInputPlaying(true);\n    };\n    inputSound.play();\n  };\n\n  const playOutput = () => {\n    outputSound.onplay = () => {\n      const timeout = setTimeout(() => setIsOutputPlaying(false), recording.inputAudio.duration * 1000); // Yes, this should be inputDuration\n      setPlayOutputTimeout(timeout);\n      setIsOutputPlaying(true);\n    };\n    outputSound.play();\n  };\n\n  const stopInput = () => {\n    inputSound.load();\n    clearTimeout(playInputTimeout);\n    setIsInputPlaying(false);\n  };\n\n  const stopOutput = () => {\n    outputSound.load();\n    clearTimeout(playOutputTimeout);\n    setIsOutputPlaying(false);\n  };\n\n  const onPressPlayInput = () => {\n    if (isInputPlaying) {\n      stopInput();\n    } else {\n      stopOutput();\n      playInput();\n    }\n  };\n\n  const onPressPlayOutput = () => {\n    if (isOutputPlaying) {\n      stopOutput();\n    } else {\n      stopInput();\n      playOutput();\n    }\n  };\n\n  const [isExportModalVisible, setIsExportModalVisible] = useState(false);\n\n  const onPressExport = () => {\n    setIsExportModalVisible(true);\n  };\n\n  useEffect(() => {\n    return () => {\n      stopInput();\n      stopOutput();\n    };\n  }, []);\n\n  return (\n    <Container>\n      <TopSection>\n        <AudioVisual\n          volume={recording.beatbotData.volume}\n          inputDuration={recording.inputAudio.duration}\n          beatStarts={recording.beatbotData.beatStarts}\n          beatEnds={recording.beatbotData.beatEnds}\n          classifications={recording.beatbotData.classifications}\n          isInputPlaying={isInputPlaying}\n          isOutputPlaying={isOutputPlaying}\n        />\n        <DrumPicker\n          classifications={recording.beatbotData.classifications}\n          drumMap={recording.drumMap}\n          showModal={() => setIsDrumPickerModalVisible(true)}\n          setSelectedClassification={setSelectedClassification}\n        />\n        <ConfidencePickerContainer>\n          <ConfidencePicker\n            label='total beats'\n            numbers={recording.beatbotData.likelyNumPeaks.slice(0, EDITOR_MAX_NUM_PEAKS)}\n            confidences={recording.beatbotData.numPeaksLikelihoods.slice(0, EDITOR_MAX_NUM_PEAKS)}\n            selectNumber={setSelectedNumPeaks}\n            selectedNumber={recording.beatbotData.chosenNumPeaks}\n          />\n        </ConfidencePickerContainer>\n        <ConfidencePickerContainer>\n          <ConfidencePicker\n            label='unique sounds'\n            numbers={recording.beatbotData.likelyNumClusters.slice(0, EDITOR_MAX_NUM_CLUSTERS)}\n            confidences={recording.beatbotData.numClustersLikelihoods.slice(0, EDITOR_MAX_NUM_CLUSTERS)}\n            selectNumber={setSelectedNumClusters}\n            selectedNumber={recording.beatbotData.chosenNumClusters}\n          />\n        </ConfidencePickerContainer>\n      </TopSection>\n      <BottomSection>\n        <Buttons>\n          <ButtonsTop>\n            <PlayInputButton\n              onPress={onPressPlayInput}\n              text={isInputPlaying ? 'Stop input' : 'Play input'}\n              icon={isInputPlaying ? 'stop' : 'play'}\n            />\n            <PlayButton\n              onPress={onPressPlayOutput}\n              text={isOutputPlaying ? 'Stop': 'Play'}\n              icon={isOutputPlaying ? 'stop' : 'play'}\n            />\n          </ButtonsTop>\n          <SecondaryButton\n            text='Export...'\n            onPress={onPressExport}\n          />\n        </Buttons>\n      </BottomSection>\n      <DrumPickerModal\n        isVisible={isDrumPickerModalVisible}\n        setIsVisible={setIsDrumPickerModalVisible}\n        classification={selectedClassification}\n        classifications={recording.beatbotData.classifications}\n        drumMap={recording.drumMap}\n        beatStarts={recording.beatbotData.beatStarts}\n        beatEnds={recording.beatbotData.beatEnds}\n        inputAudio={recording.inputAudio}\n      />\n      <ExportModal\n        isVisible={isExportModalVisible}\n        setIsVisible={setIsExportModalVisible}\n      />\n    </Container>\n  )\n};\n\nexport default EditorLoaded;","import styled from 'styled-components/native';\nimport { Animated, Easing } from 'react-native';\nimport { useEffect, useRef, useState } from 'react';\nimport { ANIMATION_USE_NATIVE_DRIVER, COLORS, SMALL_MARGIN, STANDARD_FONT_SIZE } from '../../constants';\n\nconst Container = styled.View`\n  position: absolute;\n  top: ${STANDARD_FONT_SIZE + SMALL_MARGIN}px;\n  bottom: 0;\n  width: 4px;\n  border-radius: 2px;\n  background-color: ${COLORS.DARK};\n  z-index: 1;\n  opacity: ${props => props.isVisible ? 1 : 0};\n`;\n\nconst AnimatedContainer = Animated.createAnimatedComponent(Container);\n\nconst AudioVisualCursor = ({\n  isInputPlaying,\n  isOutputPlaying,\n  inputDuration,\n}) => {\n\n  const [animation, setAnimation] = useState(null);\n\n  const animatedLeft = useRef(new Animated.Value(0)).current;\n  const animatedLeftPercent = animatedLeft ? animatedLeft.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0%', '100%']\n  }) : '0%';\n\n  const startAnimation = () => {\n    // Note: duration should always be input duration, even when playing output\n    const duration = inputDuration;\n    const animation = Animated.loop(\n      Animated.sequence([\n        Animated.timing(animatedLeft, {\n          toValue: 0,\n          duration: 0,\n          useNativeDriver: ANIMATION_USE_NATIVE_DRIVER,\n        }),\n        Animated.timing(animatedLeft, {\n          toValue: 1,\n          duration: duration * 1000,\n          useNativeDriver: ANIMATION_USE_NATIVE_DRIVER,\n          easing: Easing.linear,\n        }),\n      ])\n    );\n    animation.start();\n    setAnimation(animation);\n  };\n\n  const stopAnimation = () => {\n    if (animation) {\n      animation.stop();\n    }\n  };\n\n  useEffect(() => {\n    if (isInputPlaying || isOutputPlaying) {\n      startAnimation();\n    } else {\n      stopAnimation();\n    }\n  }, [isInputPlaying, isOutputPlaying]);\n\n\n  return (\n    <AnimatedContainer\n      isVisible={isInputPlaying || isOutputPlaying}\n      style={{ left: animatedLeftPercent }}\n    />\n  );\n};\n\nexport default AudioVisualCursor;","import { useState, useMemo } from 'react';\nimport styled from 'styled-components/native';\nimport { AUDIO_VISUAL_LINE_MARGIN, AUDIO_VISUAL_LINE_WIDTH, COLORS, FONT, SMALL_MARGIN, STANDARD_FONT_SIZE, STANDARD_MARGIN } from '../../constants';\nimport { formatSeconds } from '../../util/stringFormatter';\nimport AudioVisualCursor from './AudioVisualCursor';\n\nconst Container = styled.View`\n  position: relative;\n  width: 100%;\n  margin-vertical: ${STANDARD_MARGIN}px;\n  flex: 1;\n  max-height: 280px;\n`;\n\nconst Timestamps = styled.View`\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding-horizontal: ${SMALL_MARGIN}px;\n  margin-bottom: ${SMALL_MARGIN}px;\n`;\n\nconst Timestamp = styled.Text`\n  font-family: ${FONT};\n  font-size: ${STANDARD_FONT_SIZE}px;\n  line-height: ${STANDARD_FONT_SIZE}px;\n  color: ${COLORS.DARK};\n`;\n\nconst Lines = styled.View`\n  flex: 1;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst LinesInner = styled.View`\n  flex: 1;\n  align-items: center;\n  justify-content: space-around;\n  flex-direction: row;\n  width: ${props => props.width}px;\n`;\n\nconst Line = styled.View`\n  width: ${AUDIO_VISUAL_LINE_WIDTH}px;\n  min-height: ${AUDIO_VISUAL_LINE_WIDTH * 2}px;\n  border-radius: ${AUDIO_VISUAL_LINE_WIDTH / 2}px;\n  background-color: ${props => props.color};\n  height: ${props => props.height}px;\n`;\n\nconst getLineHeight = (volume, numLines, index) => {\n  const startIndex = Math.floor(index / numLines * (volume.length - 1));\n  const endIndex = Math.floor((index + 1) / numLines * (volume.length - 1));\n  let sum = 0;\n  for (let i = startIndex; i <= endIndex; i++) {\n    sum += volume[i];\n  }\n  return sum;\n};\n\nconst updateLineColors = (colors, beatStart, beatEnd, numLines, classification, volume) => {\n  const colorIndex = classification % COLORS.HIGHLIGHTS.length;\n  const color = COLORS.HIGHLIGHTS[colorIndex];\n  const lineStartIndex = Math.ceil(beatStart / (volume.length - 1) * (numLines - 1));\n  let lineEndIndex = Math.floor(beatEnd / (volume.length - 1) * (numLines - 1));\n  lineEndIndex = Math.max(lineEndIndex, lineStartIndex);\n  for (let i = lineStartIndex; i <= lineEndIndex; i++) {\n    colors[i] = color;\n  }\n};\n\nconst AudioVisual = ({\n  volume,\n  inputDuration,\n  beatStarts,\n  beatEnds,\n  classifications,\n  isInputPlaying,\n  isOutputPlaying,\n}) => {\n\n  const timestamps = [];\n  for (let i = 0; i < 4; i++) {\n    const seconds = Math.round(inputDuration / 3 * i);\n    timestamps.push(<Timestamp key={`timestamp-${i}`}>{formatSeconds(seconds)}</Timestamp>);\n  }\n\n  const [dimensions, setDimensions] = useState(null);\n\n  const onLayoutLines = (event) => {\n    const { width, height } = event.nativeEvent.layout;\n    setDimensions({ width, height });\n  };\n\n  const lines = useMemo(() => {\n    if (!dimensions) {\n      return null;\n    }\n    const numLines = Math.floor((dimensions.width - AUDIO_VISUAL_LINE_MARGIN) / (AUDIO_VISUAL_LINE_WIDTH + AUDIO_VISUAL_LINE_MARGIN));\n    const innerWidth = numLines * AUDIO_VISUAL_LINE_WIDTH + (numLines + 1) * AUDIO_VISUAL_LINE_MARGIN;\n    const lineHeights = [];\n    let maxLineHeight = -Infinity;\n    let minLineHeight = Infinity;\n    for (let i = 0; i < numLines; i++) {\n      const lineHeight = getLineHeight(volume, numLines, i);\n      maxLineHeight = Math.max(maxLineHeight, lineHeight);\n      minLineHeight = Math.min(minLineHeight, lineHeight);\n      lineHeights.push(lineHeight);\n    }\n    const colors = [];\n    for (let i = 0; i < numLines; i++) {\n      colors.push(COLORS.LIGHT);\n    }\n    for (let i = 0; i < beatStarts.length; i++) {\n      updateLineColors(colors, beatStarts[i], beatEnds[i], numLines, classifications[i], volume);\n    }\n    const lines = [];\n    for (let i = 0; i < numLines; i++) {\n      const pixelHeight = (lineHeights[i] - minLineHeight) / (maxLineHeight - minLineHeight) * dimensions.height;\n      lines.push(<Line key={`line-${i}`} height={pixelHeight} color={colors[i]} />); \n    }\n    return <LinesInner width={innerWidth}>{lines}</LinesInner>;\n  }, [dimensions, volume, beatStarts, beatEnds, classifications]);\n\n  return (\n    <Container>\n      <AudioVisualCursor\n        inputDuration={inputDuration}\n        isInputPlaying={isInputPlaying}\n        isOutputPlaying={isOutputPlaying}\n      />\n      <Timestamps>\n        {timestamps}\n      </Timestamps>\n      <Lines onLayout={onLayoutLines}>\n        {lines}\n      </Lines>\n    </Container>\n  )\n};\n\nexport default AudioVisual;","import { FontAwesome5 } from '@expo/vector-icons';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { Animated } from 'react-native';\nimport styled from 'styled-components/native';\nimport { ANIMATION_USE_NATIVE_DRIVER, COLORS, CONFIDENCE_PICKER_ARROW_SIZE, FONT, STANDARD_FONT_SIZE, STANDARD_MARGIN, TITLE_FONT, TITLE_FONT_SIZE } from '../../constants';\n\nconst Container = styled.View`\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst SlidingContianer = styled.View`\n  width: ${props => props.numbersLength * 100}%;\n  flex-direction: row;\n`;\n\nconst AnimatedSlidingContainer = Animated.createAnimatedComponent(SlidingContianer);\n\nconst Slide = styled.View`\n  width: ${props => 100 / props.numbersLength}%;\n`;\n\nconst SlideTitle = styled.Text`\n  font-family: ${TITLE_FONT};\n  font-size: ${TITLE_FONT_SIZE}px;\n  line-height: ${TITLE_FONT_SIZE}px;\n  color: ${COLORS.DARK};\n  text-align: center;\n`;\n\nconst SlideText = styled.Text`\n  font-family: ${FONT};\n  font-size: ${STANDARD_FONT_SIZE}px;\n  color: ${COLORS.DARK};\n  text-align: center;\n`;\n\nconst LeftArrowButton = styled.TouchableOpacity`\n  position: absolute;\n  left: 0;\n  top: 2px;\n  padding-left: ${STANDARD_MARGIN}px;\n`;\n\nconst RightArrowButton = styled.TouchableOpacity`\n  position: absolute;\n  right: 0;\n  top: 2px;\n  padding-right: ${STANDARD_MARGIN}px;\n`;\n\nlet animatedMarginPercent = '0%';\n\nconst ConfidencePicker = ({\n  label,\n  numbers,\n  confidences,\n  selectNumber,\n  selectedNumber,\n  style\n}) => {\n\n  let selectedIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === selectedNumber) {\n      selectedIndex = i;\n    }\n  }\n\n  const animatedMargin = useRef(new Animated.Value(0)).current;\n  const animateToIndex = (index) => {\n    Animated.timing(animatedMargin, {\n      toValue: index,\n      duration: 350,\n      useNativeDriver: ANIMATION_USE_NATIVE_DRIVER\n    }).start();\n  };\n  if (animatedMargin) {\n    animatedMarginPercent = animatedMargin.interpolate({\n      inputRange: [0, numbers.length - 1],\n      outputRange: ['0%', `-${100 * (numbers.length - 1)}%`]\n    });\n  }\n  \n  useEffect(() => {\n    animateToIndex(selectedIndex);\n  }, [selectedNumber]);\n\n  const onPressLeft = () => {\n    selectNumber(numbers[selectedIndex - 1]);\n  };\n\n  const onPressRight = () => {\n    selectNumber(numbers[selectedIndex + 1]);\n  };\n\n  return (\n    <Container style={style}>\n      <AnimatedSlidingContainer\n        numbersLength={numbers.length}\n        style={{ marginLeft: animatedMarginPercent }}\n      >\n        {numbers.map((number, index) => {\n          return (\n            <Slide\n              key={`slide-${index}-${number}`}\n              numbersLength={numbers.length}\n            >\n              <SlideTitle>\n                {number} {label}\n              </SlideTitle>\n              <SlideText>\n                {confidences[index]}% confidence\n              </SlideText>\n            </Slide>\n          );\n        })}\n      </AnimatedSlidingContainer>\n\n      {selectedIndex === 0 ? null : (\n        <LeftArrowButton onPress={onPressLeft}>\n          <FontAwesome5 name='chevron-circle-left' size={CONFIDENCE_PICKER_ARROW_SIZE} color={COLORS.DARK} solid />\n        </LeftArrowButton>\n      )}\n      {selectedIndex === numbers.length - 1 ? null : (\n        <RightArrowButton onPress={onPressRight}>\n          <FontAwesome5 name='chevron-circle-right' size={CONFIDENCE_PICKER_ARROW_SIZE} color={COLORS.DARK} solid />\n        </RightArrowButton>\n      )}\n    </Container>\n  );\n};\n\nexport default ConfidencePicker;","import { TouchableOpacity } from 'react-native';\nimport styled from 'styled-components/native';\nimport { getDrumById } from '../../audio/drumSounds/drumSounds';\nimport { COLORS, DRUM_PICKER_BUTTON_HEIGHT, FONT_BOLD, SMALL_FONT_SIZE, SMALL_MARGIN, STANDARD_MARGIN, TITLE_FONT } from '../../constants';\n\nconst Container = styled.View`\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  margin-horizontal: ${SMALL_MARGIN / 2}px;\n`;\n\nconst DrumContainer = styled.View`\n  width: 200px;\n  max-width: 40%;\n  margin-horizontal: ${SMALL_MARGIN / 2}px;\n  margin-bottom: ${SMALL_MARGIN}px;\n`;\n\nconst DrumInner = styled.View`\n  width: 100%;\n  height: ${DRUM_PICKER_BUTTON_HEIGHT}px;\n  border-radius: ${DRUM_PICKER_BUTTON_HEIGHT / 2}px;\n  background-color: ${props => props.color};\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DrumText = styled.Text`\n  font-size: ${SMALL_FONT_SIZE}px;\n  font-family: ${FONT_BOLD};\n  color: ${COLORS.BACKGROUND};\n`;\n\nconst DrumPicker = ({\n  classifications,\n  drumMap,\n  style,\n  showModal,\n  setSelectedClassification,\n}) => {\n\n  const uniqueClassifications = [];\n  for (let i = 0; i < classifications.length; i++) {\n    if (!uniqueClassifications.includes(classifications[i])) {\n      uniqueClassifications.push(classifications[i]);\n    }\n  }\n\n  const drumIds = uniqueClassifications.map((classification) => {\n    const drumIndex = classification % drumMap.length;\n    return drumMap[drumIndex]; \n  });\n  const drums = drumIds.map(getDrumById);\n\n  return (\n    <Container style={style}>\n      {drums.map((drum, index) => {\n        const colorIndex = uniqueClassifications[index] % COLORS.HIGHLIGHTS.length;\n        const color = COLORS.HIGHLIGHTS[colorIndex];\n        const onPress = () => {\n          setSelectedClassification(uniqueClassifications[index]);\n          showModal();\n        };\n        return (\n          <DrumContainer key={`drum-${index}`}>\n            <TouchableOpacity onPress={onPress}>\n              <DrumInner color={color}>\n                <DrumText>\n                  {drum.name.toLowerCase()}\n                </DrumText>\n              </DrumInner>\n            </TouchableOpacity>\n          </DrumContainer>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default DrumPicker;","export const framesToSamples = (frames, windowSize, osamp) => {\n  const hopSize = windowSize / osamp;\n  return (frames + 1) * hopSize;\n};","import { FontAwesome5 } from '@expo/vector-icons';\nimport { useState } from 'react';\nimport styled from 'styled-components/native';\nimport { COLORS, DRUM_SOUND_CHANNELS, DRUM_SOUND_RATE, FONT_BOLD, LARGE_FONT_SIZE, SMALL_MARGIN, STANDARD_FONT_SIZE, STANDARD_MARGIN, TITLE_FONT } from '../../constants';\n\nconst Container = styled.View`\n  align-items: flex-start;\n`;\n\nconst TitleContainer = styled.TouchableOpacity`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: ${SMALL_MARGIN / 2}px;\n  margin-top: ${STANDARD_MARGIN / 2}px;\n`;\n\nconst Title = styled.Text`\n  font-family: ${TITLE_FONT};\n  font-size: ${LARGE_FONT_SIZE}px;\n  color: ${COLORS.DARK};\n  margin-left: ${STANDARD_MARGIN}px;\n`;\n\nconst DrumSound = styled.TouchableOpacity`\n  margin-bottom: ${SMALL_MARGIN / 2}px;\n  margin-top: ${SMALL_MARGIN / 2}px;\n  margin-left: ${28 + SMALL_MARGIN}px;\n  background-color: ${props => props.isSelected ? props.color : '#00000000'};\n  border-radius: \n  height: 30px;\n  border-radius: 15px;\n  justify-content: center;\n`;\n\nconst DrumSoundText = styled.Text`\n  font-family: ${FONT_BOLD};\n  font-size: ${STANDARD_FONT_SIZE}px;\n  color: ${props => props.isSelected ? COLORS.BACKGROUND : COLORS.DARK}\n  padding-horizontal: ${SMALL_MARGIN}px;\n`;\n\nconst DrumPickerModalFolder = ({\n  drumSoundFolder,\n  selectedDrumId,\n  setSelectedDrumId,\n  color,\n}) => {\n\n  let initialIsOpened = false;\n  for (let i = 0; i < drumSoundFolder.children.length; i++) {\n    if (drumSoundFolder.children[i].id === selectedDrumId) {\n      initialIsOpened = true;\n    }\n  }\n\n  const [isOpened, setIsOpened] = useState(initialIsOpened);\n\n  const onPressTitle = () => {\n    setIsOpened(!isOpened);\n  };\n\n  return (\n    <Container>\n      <TitleContainer onPress={onPressTitle}>\n        <FontAwesome5\n          color={COLORS.DARK}\n          name={isOpened ? 'chevron-down' : 'chevron-right'}\n          size={20}\n          solid\n        />\n        <Title>\n          {drumSoundFolder.name.toLowerCase()}\n        </Title>\n      </TitleContainer>\n      {!isOpened ? null : drumSoundFolder.children.map((drumSound) => {\n        const isSelected = drumSound.id === selectedDrumId;\n        const onPressDrum = () => {\n          drumSound.sound.play();\n          setSelectedDrumId(drumSound.id);\n        };\n        return (\n          <DrumSound\n            key={drumSound.id}\n            isSelected={isSelected}\n            color={color}\n            onPress={onPressDrum}\n          >\n            <DrumSoundText isSelected={isSelected}>\n              {drumSound.name.toLowerCase()}\n            </DrumSoundText>\n          </DrumSound>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default DrumPickerModalFolder;","import { FontAwesome5 } from '@expo/vector-icons';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components/native';\nimport { drumSounds } from '../../audio/drumSounds/drumSounds';\nimport { makeSound } from '../../audio/player/player.web';\nimport { PrimaryButton } from '../../components/Button';\nimport Modal from '../../components/Modal';\nimport { BEATBOT_OSAMP, BEATBOT_WINDOW_SIZE, BUTTON_BORDER_WIDTH, COLORS, FONT_BOLD, SMALL_MARGIN, STANDARD_FONT_SIZE, STANDARD_MARGIN, TITLE_FONT, TITLE_FONT_SIZE } from '../../constants';\nimport { setSelectedDrumMap } from '../../recordings/recordingEditor';\nimport { framesToSamples } from '../../util/conversion';\nimport DrumPickerModalFolder from './DrumPickerModalFolder';\n\nconst StyledModal = styled(Modal)`\n  flex: 1;\n  padding: ${STANDARD_MARGIN}px;\n`;\n\nconst Header = styled.View`\n  margin-bottom: ${SMALL_MARGIN}px;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Title = styled.Text`\n  font-family: ${TITLE_FONT};\n  font-size: ${TITLE_FONT_SIZE}px;\n  color: ${COLORS.DARK};\n`;\n\nconst SoundButton = styled.TouchableOpacity`\n  height: 30px;\n  border-radius: 15px;\n  border: ${BUTTON_BORDER_WIDTH}px solid ${COLORS.DARK};\n  flex-direction: row;\n  justify-content: space-around; \n  align-items: center;\n  padding-horizontal: ${SMALL_MARGIN}px;\n`;\n\nconst SoundButtonText = styled.Text`\n  font-family: ${FONT_BOLD};\n  font-size: ${STANDARD_FONT_SIZE}px;\n  line-height: ${STANDARD_FONT_SIZE}px;\n  margin-top: 3px;\n  color: ${COLORS.DARK};\n  margin-left: ${SMALL_MARGIN}px;\n`;\n\nconst Folders = styled.ScrollView`\n`;\n\nconst Buttons = styled.View`\n  flex-direction: row;\n  margin-top: ${SMALL_MARGIN}px;\n`;\n\nconst DoneButton = styled(PrimaryButton)`\n  flex: 1;\n`;\n\nconst DrumPickerModal = ({\n  isVisible,\n  setIsVisible,\n  classification,\n  drumMap,\n  classifications,\n  beatStarts,\n  beatEnds,\n  inputAudio,\n}) => {\n\n  const colorIndex = classification % COLORS.HIGHLIGHTS.length;\n  const color = COLORS.HIGHLIGHTS[colorIndex];\n\n  const drumIndex = classification % drumMap.length;\n  const selectedDrumId = drumMap[drumIndex];\n  const setSelectedDrumId = (newDrumId) => {\n    const newDrumMap = [...drumMap];\n    newDrumMap[drumIndex] = newDrumId;\n    setSelectedDrumMap(newDrumMap);\n  };\n\n  let beatIndex = 0;\n  for (let i = 0; i < classifications.length; i++) {\n    if (classifications[i] === classification) {\n      beatIndex = i;\n    }\n  } \n  const soundStart = framesToSamples(beatStarts[beatIndex], BEATBOT_WINDOW_SIZE, BEATBOT_OSAMP);\n  const soundEnd = framesToSamples(beatEnds[beatIndex], BEATBOT_WINDOW_SIZE, BEATBOT_OSAMP);\n  const audio = inputAudio.data.slice(soundStart, soundEnd);\n  const sound = makeSound(new Int16Array(audio), inputAudio.rate, inputAudio.channels);\n\n  const onPressInput = () => {\n    sound.play();\n  };\n\n  const onPressDone = () => {\n    setIsVisible(false);\n  };\n\n  return (\n    <StyledModal\n      isVisible={isVisible}\n      close={() => setIsVisible(false)}\n    >\n      <Header>\n        <Title>\n          Instrument\n        </Title>\n        <SoundButton onPress={onPressInput}>\n          <FontAwesome5 \n            size={14}\n            name='volume-up'\n            color={COLORS.DARK}\n            solid\n          />\n          <SoundButtonText>input</SoundButtonText>\n        </SoundButton>\n      </Header>\n      <Folders contentContainerStyle={{ flex: 1 }}>\n        {drumSounds.map((drumSoundFolder, index) => (\n          <DrumPickerModalFolder\n            key={`drum-sound-folder-${index}`}\n            drumSoundFolder={drumSoundFolder}\n            color={color}\n            selectedDrumId={selectedDrumId}\n            setSelectedDrumId={setSelectedDrumId}\n          />\n        ))}\n      </Folders>\n      <Buttons>\n        <DoneButton\n          text='Done'\n          onPress={onPressDone}\n        />\n      </Buttons>\n    </StyledModal>  \n  );\n};\n\nexport default DrumPickerModal;","import MidiWriter from 'midi-writer-js';\nimport { BEATBOT_OSAMP, BEATBOT_WINDOW_SIZE, MIDI_BPM, MIDI_DRUM_START } from '../constants';\nimport { framesToSamples } from '../util/conversion';\n\nexport const buildMidiBytes = (\n  beatStarts,\n  beatEnds,\n  classifications,\n  sampleRate,\n) => {\n\n  const midiTrack = new MidiWriter.Track();\n  midiTrack.setTempo(MIDI_BPM);\n\n  for (let i = 0; i < beatStarts.length; i++) {\n    const beatStart = beatStarts[i];\n    const beatEnd = beatEnds[i];\n    const classification = classifications[i];\n\n    const startTick = framesToTicks(beatStart, sampleRate, BEATBOT_WINDOW_SIZE, BEATBOT_OSAMP, MIDI_BPM);\n    const endTick = framesToTicks(beatEnd, sampleRate, BEATBOT_WINDOW_SIZE, BEATBOT_OSAMP, MIDI_BPM);\n    const tickDuration = endTick - startTick;\n\n    const midiPitch = classification + MIDI_DRUM_START;\n    const midiNote = new MidiWriter.NoteEvent({\n      startTick,\n      pitch: midiPitch,\n      duration: 'T' + tickDuration,\n    });\n    midiTrack.addEvent(midiNote);\n  }\n\n  const writer = new MidiWriter.Writer([midiTrack]);\n  return writer.buildFile().buffer;\n};\n\nconst framesToTicks = (\n  frames,\n  sampleRate,\n  windowSize,\n  osamp,\n  bpm,\n) => {\n  const samples = framesToSamples(frames, windowSize, osamp);\n  const ms = samplesToMs(samples, sampleRate);\n  const ticks = msToTicks(ms, bpm);\n  return ticks;\n};\n\nconst samplesToMs = (samples, sampleRate) => {\n  return samples / sampleRate * 1000;\n};\n\nconst msToTicks = (ms, bpm) => {\n  const tempo = Math.round((60 * 1000000) / bpm);\n  const ticksPerBeat = 128;\n  const seconds = ms / 1000;\n  const ticks = Math.round(seconds / (tempo * 1e-6 / ticksPerBeat));\n  return ticks;\n};","import { buildMidiBytes } from '../audio/midiBuilder';\nimport { buildWavBytes } from '../audio/wavBuilder';\nimport { EXPORT_FILE_TYPES } from '../constants';\nimport { writeFile } from './fileWriter';\n\nexport const exportRecording = (recording, exportType) => {\n  const isMidi = (exportType === EXPORT_FILE_TYPES.MIDI);\n  const isWav = (exportType === EXPORT_FILE_TYPES.WAV);\n  if (!isMidi && !isWav) {\n    throw Error('Invalid export file type.');\n  }\n\n  let bytes;\n  if (isWav) {\n    const { data, rate, channels } = recording.beatbotData.outputAudio;\n    const dataArray = new Int16Array(data);\n    bytes = buildWavBytes(dataArray, rate, channels);\n  } else if (isMidi) {\n    const { beatStarts, beatEnds, classifications, outputAudio: { rate }} = recording.beatbotData;\n    bytes = buildMidiBytes(beatStarts, beatEnds, classifications, rate);\n  }\n\n  const extension = isWav ? '.wav' : '.mid';\n  const fileName = recording.name + extension;\n\n  writeFile(bytes, fileName);\n};\n","export const writeFile = (bytes, fileName) => {\n  const blob = new Blob([bytes], { type: 'octet/stream' });\n  const url = window.URL.createObjectURL(blob);\n  const element = document.createElement('a');\n  element.setAttribute('href', url);\n  element.setAttribute('download', fileName);\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n  window.URL.revokeObjectURL(url);\n};","import { useSelector } from 'react-redux';\nimport ModalOptions from '../../components/ModalOptions';\nimport { EXPORT_FILE_TYPES } from '../../constants';\nimport { exportRecording } from '../../util/exporter';\nimport { selectFocusedRecording } from '../../redux/selectors';\n\nconst ExportModal = ({ isVisible, setIsVisible }) => {\n\n  const recording = useSelector(selectFocusedRecording);\n\n  return (\n    <ModalOptions\n      isVisible={isVisible}\n      setIsVisible={setIsVisible}\n      options={[\n        {\n          text: 'Export midi data (.mid)',\n          onPress: () => {\n            exportRecording(recording, EXPORT_FILE_TYPES.MIDI);\n          },\n        },\n        {\n          text: 'Export audio (.wav)',\n          onPress: () => {\n            exportRecording(recording, EXPORT_FILE_TYPES.WAV);\n          },\n        },\n      ]}\n    />\n  );\n};\n\nexport default ExportModal;","import { useNavigation } from '@react-navigation/native';\nimport { useEffect } from 'react';\nimport styled from 'styled-components/native';\nimport WaveVisual from '../../components/WaveVisual';\nimport { PROCESSING_WAVE_VISUAL_COLORS, STANDARD_MARGIN } from '../../constants';\nimport { setNavigationOptions } from '../../util/navigate';\n\nconst Container = styled.View`\n  flex: 1;\n  width: 100%;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: ${2 * STANDARD_MARGIN}px;\n`;\n\nconst EditorLoading = () => {\n\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    navigation.setOptions({\n      title: 'Loading...',\n      headerLeft: null,\n    });\n  }, [navigation]);\n\n  return (\n    <Container>\n      <WaveVisual\n        lineColors={PROCESSING_WAVE_VISUAL_COLORS}\n      />\n    </Container>\n  )\n};\n\nexport default EditorLoading;","import { useSelector } from 'react-redux';\nimport styled from 'styled-components/native';\nimport { COLORS } from '../../constants';\nimport EditorLoaded from './EditorLoaded';\nimport EditorLoading from './EditorLoading';\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: ${COLORS.BACKGROUND};\n`;\n\nconst Editor = ({ navigation }) => {\n  const isLoading = useSelector(state => state.recordings.isProcessing);\n  const content = isLoading ? <EditorLoading navigation={navigation} /> : <EditorLoaded navigation={navigation} />;\n  return (\n    <Container>\n      {content}\n    </Container>\n  );\n};\n\nexport default Editor;"],"sourceRoot":""}